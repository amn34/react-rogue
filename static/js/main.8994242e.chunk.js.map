{"version":3,"sources":["InputManager.js","Entity.js","Player.js","Combat.js","World.js","Loot.js","Monster.js","Stairs.js","Shopkeeper.js","Spawner.js","ReactRouge.js","App.js","index.js"],"names":["InputManager","observers","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","subscriber","action","data","forEach","document","addEventListener","removeEventListener","Entity","size","attributes","verb","world","console","log","context","fillStyle","color","textBaseline","font","fillText","ascii","offset","Player","name","maxHealth","health","attack","defense","gold","dx","dy","item","power","Math","floor","random","addToHistory","newPlayer","Object","assign","Combat","attacker","defender","damage","type","reward","player","remove","World","width","height","tileSize","entities","level","history","worldmap","Array","entity","getEntityAtLocation","undefined","find","tempPlayer","copyPlayer","move","isWall","monster","tempMonster","copyMonster","vector","chooseMonsterDirection","rand","map","Map","Cellular","connected","randomize","userCallback","value","create","connect","drawWall","draw","fillRect","length","shift","Loot","add","Monster","newMonster","Stairs","createCellularMap","moveToSpace","spawner","Spawner","MonsterTable","spawnLoot","spawnMonsters","spawnStairs","spawnShopKeeper","Shopkeeper","num","getRandomInt","max","lootTable","shopTable","spawnCount","createEntity","count","spawn","stairs","ReactRouge","canvasRef","React","useRef","useState","setWorld","inputManager","handleInput","newWorld","movePlayer","moveMonsters","useEffect","ctx","current","getContext","clearRect","bindKeys","subscribe","unbindKeys","unsubscribe","style","display","padding","index","key","ref","border","background","listStyle","App","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8994242e.chunk.js","sourcesContent":["class InputManager {\r\n    observers = [];\r\n\r\n    subscribe(fn) {\r\n        this.observers.push(fn);\r\n    }\r\n\r\n    unsubscribe(fn) {\r\n        this.observers = this.observers.filter(subscriber => subscriber !== fn);\r\n    }\r\n\r\n    broadcast(action, data) {\r\n        this.observers.forEach(subscriber => subscriber(action, data));\r\n    }\r\n\r\n    handleKeys = e => {\r\n        e.preventDefault();\r\n        switch (e.keyCode) {\r\n            case 37: //left arrow\r\n                this.broadcast('move', {x:-1,y:0});\r\n                break;\r\n            case 38: //up arrow\r\n                this.broadcast('move', {x:0, y:-1});\r\n                break;\r\n            case 39: //right\r\n                this.broadcast('move', {x:1, y:0});\r\n                break;\r\n            case 40: //down\r\n                this.broadcast('move', {x:0, y:1});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    bindKeys() {\r\n        document.addEventListener('keydown', this.handleKeys);\r\n    }\r\n\r\n    unbindKeys() {\r\n        document.removeEventListener('keydown', this.handleKeys);\r\n    }\r\n}\r\n\r\nexport default InputManager;","class Entity {\r\n\r\n    constructor(x,y,size,attributes) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.size = size;\r\n        this.attributes = {...attributes};\r\n    }\r\n\r\n    action(verb, world) {\r\n        console.log(`Verb: ${verb}`);\r\n    }\r\n\r\n\r\n\r\n\r\n    draw(context) {\r\n        context.fillStyle = this.attributes.color || 'white';\r\n        context.textBaseline = 'hanging';\r\n        context.font = '16px Helvetica';\r\n        context.fillText(this.attributes.ascii,\r\n            this.x * this.size + (this.attributes.offset ? this.attributes.offset.x : 0),\r\n            this.y * this.size + (this.attributes.offset ? this.attributes.offset.y : 0)\r\n        );\r\n    }\r\n}\r\n\r\nexport default Entity;\r\n","import Entity from \"./Entity\";\r\n\r\nclass Player extends Entity{\r\n\r\n    attributes = {\r\n        name: 'Player',\r\n        ascii: '@',\r\n        maxHealth: 10,\r\n        health: 10,\r\n        attack: 1,\r\n        defense: 0,\r\n        gold: 0\r\n    }\r\n\r\n    move(dx, dy) {\r\n        //if the player is dead it can't move\r\n        if(this.attributes.health <= 0) return; \r\n\r\n        //otherwise move\r\n        this.x += dx;\r\n        this.y += dy;\r\n    }\r\n\r\n    add(item, world) {\r\n        \r\n        let power = 1 + Math.floor(Math.random() * 2);\r\n        if(item.attributes.name === 'Sword') {\r\n            this.attributes.attack = this.attributes.attack + power;\r\n        } else if(item.attributes.name === 'Armor') {\r\n            this.attributes.defense += power;\r\n        } else if(item.attributes.name === 'Gold') {\r\n            this.attributes.gold += power;\r\n        } else {\r\n            //potion, heals and adds +1 maxhealth\r\n            power += 4\r\n            this.attributes.health += power;\r\n            this.attributes.maxHealth += 1;\r\n            //prevents the player from having more health than max health\r\n            if(this.attributes.health > this.attributes.maxHealth) {\r\n                this.attributes.health = this.attributes.maxHealth;\r\n            }\r\n        }\r\n\r\n        world.addToHistory(`You have picked up ${item.attributes.name}`);\r\n        world.addToHistory(`Power: ${power}`);\r\n    }\r\n\r\n\r\n    copyPlayer() {\r\n        let newPlayer = new Player();\r\n        Object.assign(newPlayer, this);\r\n        return newPlayer;\r\n    }\r\n}\r\nexport default Player;","class Combat {\r\n\r\n    static attack(attacker, defender, world) {\r\n        \r\n        let damage = attacker.attributes.attack - defender.attributes.defense;\r\n        if(damage > 0) {\r\n            defender.attributes.health -= damage;\r\n            world.addToHistory(`${attacker.attributes.name} attacks ${defender.attributes.name} for ${damage} damage`);\r\n            if(defender.attributes.health <= 0) {\r\n                world.addToHistory(`${defender.attributes.name} has died!`)\r\n                if(defender.attributes.type === 'monster') { \r\n                    world.addToHistory(`You collected ${defender.attributes.reward} gold`);\r\n                    world.player.attributes.gold += defender.attributes.reward;\r\n                    world.remove(defender);\r\n                }\r\n            }\r\n        } else {\r\n            world.addToHistory(`${attacker.attributes.name} dealt no damage to ${defender.attributes.name}`);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default Combat","import { Map } from 'rot-js';\r\nimport Player from './Player';\r\nimport Combat from './Combat';\r\n\r\nclass World {\r\n\r\n    constructor(width, height, tileSize) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tileSize = tileSize;\r\n        this.entities = [new Player(0,0,16)];\r\n        this.level = 0;\r\n        this.history = [];\r\n\r\n\r\n        this.worldmap = new Array(this.width);\r\n        for (let x = 0; x< this.width; x++) {\r\n            this.worldmap[x] = new Array(this.height);\r\n        }\r\n    }\r\n\r\n    get player() {\r\n        return this.entities[0];\r\n    }\r\n\r\n    add(entity) {\r\n        this.entities.push(entity);\r\n    }\r\n\r\n    remove(entity) {\r\n        this.entities = this.entities.filter(e => e !== entity);\r\n    }\r\n\r\n    //if the entity is spawned in the wall move it until it reaches a \r\n    //free space \r\n    moveToSpace(entity) {\r\n        for(let x = entity.x; x < this.width; x++) {\r\n            for(let y = entity.y; y < this.height; y++) {\r\n                if(this.worldmap[x][y] === 0 && !this.getEntityAtLocation(x,y)) {\r\n                    entity.x = x;\r\n                    entity.y = y;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //returns if the square the player is moving to is a invalid square\r\n    isWall(x, y) {\r\n        return (this.worldmap[x] === undefined ||\r\n             this.worldmap[y] === undefined ||\r\n             this.worldmap[x][y] === 1);\r\n    } \r\n\r\n    getEntityAtLocation(x,y) {\r\n        return this.entities.find(entity => entity.x === x && entity.y === y);\r\n    }\r\n\r\n    movePlayer(dx, dy) {\r\n        let tempPlayer = this.player.copyPlayer();\r\n        tempPlayer.move(dx,dy);\r\n        let entity = this.getEntityAtLocation(tempPlayer.x, tempPlayer.y);\r\n        if(entity) {\r\n            console.log(entity);\r\n            entity.action('bump', this);\r\n            return;\r\n        }\r\n        if (this.isWall(tempPlayer.x, tempPlayer.y)) {\r\n            console.log(`Way blocked at ${tempPlayer.x}:${tempPlayer.y}!`);\r\n        } else {\r\n            this.player.move(dx,dy);\r\n        }\r\n    }\r\n\r\n    moveMonsters(world) {\r\n        this.entities.filter(entity => entity.attributes.type === 'monster').forEach(monster => {\r\n            let tempMonster = monster.copyMonster();\r\n            let vector = this.chooseMonsterDirection();\r\n            let dx = vector.x;\r\n            let dy = vector.y;\r\n            tempMonster.move(dx,dy);\r\n            let entity = this.getEntityAtLocation(tempMonster.x, tempMonster.y);\r\n            if(entity === this.player) {\r\n                Combat.attack(tempMonster, this.player, world);\r\n                return;\r\n            } else if(entity) {\r\n                return;\r\n            }\r\n            if(!this.isWall(tempMonster.x, tempMonster.y)) {\r\n                monster.move(dx,dy)\r\n            }\r\n        });\r\n    }\r\n\r\n    chooseMonsterDirection() {\r\n        let rand = Math.floor(Math.random() * 4) + 1;\r\n        if(rand === 1) return {x:1,y:0};\r\n        if(rand === 2) return {x:-1,y:0};\r\n        if(rand === 3) return {x:0,y:1};\r\n        if(rand === 4) return {x:0,y:-1};\r\n    }\r\n\r\n\r\n    createCellularMap() {\r\n        var map = new Map.Cellular(this.width, this.height, { connected:true });\r\n        map.randomize(0.5);\r\n        var userCallback = (x, y, value) => {\r\n            if(x === 0 || y === 0 || x === this.width - 1 || y === this.height - 1) {\r\n                this.worldmap[x][y] = 1; //create walls around the edges of the map\r\n                return;\r\n            }\r\n            this.worldmap[x][y] = value === 0 ? 1: 0;\r\n        };\r\n        map.create(userCallback);\r\n        map.connect(userCallback, 1);\r\n    }\r\n\r\n    draw(context) {\r\n        //draws the map\r\n        for(let x = 0; x < this.width; x++) {\r\n            for(let y = 0; y < this.height; y++) {\r\n                if(this.worldmap[x][y] === 1) this.drawWall(context, x, y);\r\n            }\r\n        }\r\n\r\n        //draws the entities in the game\r\n        this.entities.forEach(entity => {\r\n            entity.draw(context);\r\n        }); \r\n\r\n    }\r\n\r\n    drawWall(context, x, y) {\r\n        context.fillStyle = '#000';\r\n        context.fillRect(x * this.tileSize, y * this.tileSize,\r\n             this.tileSize, this.tileSize);\r\n    }\r\n\r\n    addToHistory(history) {\r\n        this.history.push(history);\r\n        //keeps the history from getting to long\r\n        if(this.history.length > 6) this.history.shift();\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default World;","import Entity from \"./Entity\";\r\n\r\nclass Loot extends Entity {\r\n\r\n    action(verb, world) {\r\n        if(verb === 'bump') {\r\n            console.log('Pickup', this);\r\n            world.player.add(this, world);\r\n            world.remove(this);\r\n        }\r\n        if(verb === 'drop') {\r\n            console.log('drop', this);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Loot;","import Entity from \"./Entity\";\r\nimport Combat from \"./Combat\";\r\n\r\nclass Monster extends Entity {\r\n    action(verb, world) {\r\n        if(verb === 'bump') {\r\n            //attack \r\n            Combat.attack(world.player, this, world);\r\n            if(this.attributes.health > 0) { //monster lives and counterattacks\r\n                Combat.attack(this, world.player, world);\r\n            }\r\n        }\r\n    }\r\n\r\n    move(dx, dy) {\r\n        this.x += dx;\r\n        this.y += dy;\r\n    }\r\n\r\n    copyMonster() {\r\n        let newMonster = new Monster();\r\n        Object.assign(newMonster, this);\r\n        return newMonster;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Monster;\r\n","import Entity from \"./Entity\";\r\nimport Spawner from \"./Spawner\";\r\n\r\n\r\nclass Stairs extends Entity {\r\n\r\n    attributes = {\r\n        name: 'Stair',\r\n        color: 'white',\r\n         ascii: '>',\r\n         offset: { x: 2, y: 2 }\r\n    };\r\n\r\n    action(verb, world) {\r\n        if(verb === 'bump') {\r\n            world.level += 1;\r\n            world.addToHistory('You move down the stairs...');\r\n            world.addToHistory(`You have entered B${world.level}`);\r\n            world.createCellularMap();\r\n            world.player.x = 0;\r\n            world.player.y = 0;\r\n            world.moveToSpace(world.player);\r\n            world.entities = world.entities.filter(e => e === world.player);\r\n            let spawner = new Spawner(world);\r\n            //improves the stats of each monster in the game. \r\n            spawner.MonsterTable.forEach(monster => {\r\n                monster.health += 4 * world.level;\r\n                monster.attack += 4 * world.level;\r\n                monster.defense += 2 * world.level;\r\n                monster.reward += 1 * world.level;\r\n            });\r\n\r\n            spawner.spawnLoot(10);\r\n            spawner.spawnMonsters(6);\r\n            spawner.spawnStairs();\r\n            spawner.spawnShopKeeper();\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Stairs;","import Entity from \"./Entity\";\r\n\r\nclass Shopkeeper extends Entity{\r\n    \r\n    action(verb, world) {\r\n        if(verb === 'bump') {\r\n            let rand = this.attributes.num;\r\n            if(rand === 0) {\r\n                world.addToHistory(`You purchased ${world.player.attributes.gold} swords from Shopkeeper Kevin`);\r\n                world.player.attributes.attack += world.player.attributes.gold;\r\n                world.player.attributes.gold = 0;\r\n            } else if(rand === 1) {\r\n                world.addToHistory(`You purchased ${world.player.attributes.gold} armor from Shopkeeper Omri`);\r\n                world.player.attributes.defense += world.player.attributes.gold;\r\n                world.player.attributes.gold = 0;\r\n            } else {\r\n                world.addToHistory(`Shopkeeper Joey stole all your gold!`);\r\n                world.player.attributes.gold = 0;\r\n            }\r\n            world.remove(this);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Shopkeeper;","import Loot from \"./Loot\";\r\nimport Monster from \"./Monster\";\r\nimport Stairs from \"./Stairs\";\r\nimport Shopkeeper from \"./Shopkeeper\";\r\n\r\n\r\n\r\n\r\nclass Spawner {\r\n    \r\n    constructor(world) {\r\n        this.world = world;\r\n        this.MonsterTable = [\r\n            {type: 'monster', name: 'Ogre', color: 'lightgrey', ascii: 'O', offset: {x: 2, y: 3}, health: 5, attack: 2, defense: 0, reward: 3},\r\n            {type: 'monster', name: 'Snake', color: 'lightgreen', ascii: 'S', offset: {x: 2, y: 3}, health: 3, attack: 2, defense: 0, reward: 2},\r\n            {type: 'monster', name: 'Rat', color: 'darkgrey', ascii: 'R', offset: {x: 2, y: 3}, health: 2, attack: 1, defense: 0, reward: 1},\r\n            {type: 'monster', name: 'Penguin', color: 'blue', ascii: 'P', offset: {x: 2, y: 3}, health: 10, attack: 3, defense: 0, reward: 6},\r\n        ];\r\n        \r\n        this.lootTable = [\r\n            {type: 'item', name: 'Sword', color: 'darkgrey', ascii: '/', offset: {x: 6, y: 3}},\r\n            {type: 'item', name: 'Potion', color: 'red', ascii: '!', offset: {x: 6, y: 3}},\r\n            {type: 'item', name: 'Gold', color: 'yellow', ascii: '$', offset: {x: 3, y: 3}},\r\n            {type: 'item', name: 'Armor', color: 'lightgrey', ascii: '#', offset: {x: 4, y: 3}}  \r\n        ];\r\n\r\n        this.shopTable = [\r\n            {type: 'shopkeeper', name: 'Kevin', ascii: 'Q', offset: {x:2, y:3}, num: 0},\r\n            {type: 'shopkeeper', name: 'Omri', ascii: 'Q', offset: {x:2, y:3}, num: 1},\r\n            {type: 'shopkeeper', name: 'Joey', ascii: 'Q', offset: {x:2, y:3}, num: 2},\r\n        ];\r\n    }\r\n\r\n    spawn(spawnCount, createEntity) {\r\n        for(let count = 0; count < spawnCount; count++) {\r\n            let entity = createEntity();\r\n            this.world.add(entity);\r\n            this.world.moveToSpace(entity);\r\n        }\r\n    };\r\n\r\n    spawnLoot(spawnCount) {\r\n        this.spawn(spawnCount, () => {\r\n            return new Loot(\r\n                getRandomInt(this.world.width - 1),\r\n                getRandomInt(this.world.height - 1),\r\n                this.world.tileSize,\r\n                this.lootTable[getRandomInt(this.lootTable.length)]);\r\n        });\r\n    }\r\n\r\n    spawnMonsters(spawnCount) {\r\n        this.spawn(spawnCount, () => {\r\n            return new Monster(\r\n                getRandomInt(this.world.width - 1),\r\n                getRandomInt(this.world.height - 1),\r\n                this.world.tileSize,\r\n                this.MonsterTable[getRandomInt(this.lootTable.length)]);\r\n        });\r\n    }\r\n\r\n    spawnShopKeeper() {\r\n        this.spawn(1, () => {\r\n            return new Shopkeeper(\r\n                getRandomInt(this.world.width - 1),\r\n                getRandomInt(this.world.height - 1),\r\n                this.world.tileSize,\r\n                this.shopTable[getRandomInt(this.shopTable.length)]);\r\n        });\r\n    }\r\n\r\n    spawnStairs() {\r\n        let stairs = new Stairs(this.world.width - 10,\r\n             this.world.height - 10, this.world.tileSize);\r\n        this.world.add(stairs);\r\n        this.world.moveToSpace(stairs);\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport default Spawner;\r\n","import React,{useEffect, useState} from 'react';\r\nimport InputManager from './InputManager.js';\r\nimport World from './World.js';\r\nimport Spawner  from './Spawner.js';\r\n\r\nconst ReactRouge  = ({width, height, tileSize}) => { \r\n\r\n\r\n    const canvasRef = React.useRef(null);\r\n    //update the world \r\n    const[world, setWorld] = useState(new World(width, height, tileSize)); \r\n    //handles user input\r\n    let inputManager = new InputManager();\r\n\r\n\r\n    //action for user input\r\n    const handleInput = (action, data) => {\r\n        let newWorld = new World();\r\n        Object.assign(newWorld, world); //deep copy?\r\n        newWorld.movePlayer(data.x, data.y);\r\n        newWorld.moveMonsters(world);\r\n        setWorld(newWorld);\r\n    };\r\n\r\n    //creates the map\r\n    useEffect(() => {\r\n        let newWorld = new World();\r\n        Object.assign(newWorld, world);\r\n        newWorld.createCellularMap();\r\n        newWorld.moveToSpace(world.player); //moves the player to a open space\r\n        let spawner = new Spawner(newWorld);\r\n        spawner.spawnLoot(10);\r\n        spawner.spawnMonsters(6);\r\n        spawner.spawnStairs();\r\n        setWorld(newWorld);\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); //prevents createmap from being called after every movement\r\n\r\n    //draws the map\r\n    useEffect(() => {\r\n        const ctx  = canvasRef.current.getContext('2d');\r\n        ctx.clearRect(0,0,width * tileSize, height * tileSize);\r\n        world.draw(ctx, tileSize);\r\n    });\r\n\r\n    //adds key listener\r\n    useEffect(() => {\r\n        inputManager.bindKeys();\r\n        inputManager.subscribe(handleInput);\r\n        return () =>  {\r\n            inputManager.unbindKeys();\r\n            inputManager.unsubscribe(handleInput);\r\n        };\r\n    });\r\n\r\n    return (         \r\n    <div style = {{display: 'flex'}}>\r\n        <ul style = {{padding: '20px'}}>\r\n            <li style = {{display: 'inline-center'}}> Log: </li>\r\n            <li> -------------------------------</li>\r\n            {world.history.map((item, index) => (<li key = {index}>{item}</li>))} \r\n        </ul>\r\n        <canvas \r\n            ref = {canvasRef}\r\n            width = {width * tileSize}  \r\n            height = {height * tileSize}\r\n            style = {{border: '1px solid black', background: 'DimGray', display: 'block'}}\r\n        ></canvas> \r\n        <ul style = {{listStyle: 'none'}}>\r\n            <h1> B{world.level}</h1>\r\n            <li> Health: {world.player.attributes.health} / {world.player.attributes.maxHealth}</li>\r\n            <li> Attack: {world.player.attributes.attack}</li>\r\n            <li> Defense: {world.player.attributes.defense}</li>\r\n            <li> Gold: {world.player.attributes.gold}</li>\r\n        </ul>\r\n    </div>\r\n)};\r\n\r\nexport default ReactRouge;","import React from 'react';\r\nimport ReactRouge from './ReactRouge.js';\r\n\r\n//function that returns jsx\r\nconst App = () => (\r\n<div className=\"App\"> \r\n  {/* Passing props into the react component*/}\r\n  <ReactRouge width = {40} height = {40} tileSize = {16}/>\r\n</div>\r\n);\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}